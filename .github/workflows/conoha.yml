name: Deploy to ConoHa VPS

on:
  push:
    branches:
      - master
      - staging
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  conoha-check:
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: ./.github/workflows/composite/setup

  conoha-setup:
    needs: conoha-check
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    outputs:
      ENVIRONMENT: ${{ steps.output.outputs.ENVIRONMENT }}

    steps:
      - name: staging
        id: detect-staging
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "ENVIRONMENT=staging" >> "$GITHUB_ENV"

      - name: production
        id: detect-production
        if: github.ref == 'refs/heads/master'
        run: |
          echo "ENVIRONMENT=production" >> "$GITHUB_ENV"

      - name: Error
        if: steps.detect-staging.outcome == 'skipped' && steps.detect-production.outcome == 'skipped'
        run: |
          echo "::error::Invalid target branch: ${{ github.ref }}. Skipping deployment."
          exit 1

      - name: Output environment
        id: output
        run: |
          echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> "$GITHUB_OUTPUT"

  conoha-build:
    needs:
      - conoha-check
      - conoha-setup
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read
      packages: write
    outputs:
      IMAGE_TAG_FOR_PULL: ${{steps.tag.outputs.TAG_FOR_PULL}}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create image tag
        id: tag
        run: |
          SHA=${{github.sha}}
          TAG="${{vars.IMAGE}}:$(TZ=UTC-9 date +'%Y%m')-${SHA:0:7}"
          echo "TAG_FOR_PULL=${TAG}" >> "$GITHUB_OUTPUT"

          if [ "${{ needs.conoha-setup.outputs.ENVIRONMENT }}" = "production" ]; then

            LATEST="${{vars.IMAGE}}:latest"
            echo "TAGS=${TAG},${LATEST}" >> "$GITHUB_OUTPUT"

          else
            echo "TAGS=${TAG}" >> "$GITHUB_OUTPUT"
          fi
          echo "Generated image tag: ${TAG}"

      - name: Build and push
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.tag.outputs.TAGS }}
          cache-from: type=gha
          cache-to: type=gha, mode=max

  conoha:
    needs:
      - conoha-check
      - conoha-setup
      - conoha-build
    if: ${{ needs.conoha-setup.outputs.ENVIRONMENT == 'production' || needs.conoha-setup.outputs.ENVIRONMENT == 'staging' }}
    environment: ${{ needs.conoha-setup.outputs.ENVIRONMENT }}
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read
      packages: read

    steps:
      - name: SSH to ConoHa VPS
        uses: appleboy/ssh-action@2ead5e36573f08b82fbfce1504f1a4b05a647c6f # v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          # always remove old container: https://stackoverflow.com/questions/34228864/stop-and-delete-docker-container-if-its-running
          script: |
            set -euo pipefail
            echo ${{secrets.GITHUB_TOKEN}} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker stop ${{ vars.CONTAINER_NAME }} || true && docker rm ${{ vars.CONTAINER_NAME }} || true
            docker run \
              -d \
              --name ${{ vars.CONTAINER_NAME }} \
              --env DISCORD_BOT_TOKEN=${{secrets.DISCORD_BOT_TOKEN}} \
              --env LOG_CHANNEL_ID=${{vars.LOG_CHANNEL_ID}} \
              --env NOTION_TOKEN=${{secrets.NOTION_TOKEN}} \
              --env NOTION_DOMAIN=${{vars.NOTION_DOMAIN}} \
              --env SENTRY_DSN=${{secrets.SENTRY_DSN}} \
              --env DEPLOY_ENV=${{ needs.conoha-setup.outputs.ENVIRONMENT }} \
              --env CF_ACCESS_CLIENT_ID=${{secrets.CF_ACCESS_CLIENT_ID}} \
              --env CF_ACCESS_CLIENT_SECRET=${{secrets.CF_ACCESS_CLIENT_SECRET}} \
              ${{ needs.conoha-build.outputs.IMAGE_TAG_FOR_PULL }}
            docker image prune -f
