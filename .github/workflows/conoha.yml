name: Deploy to ConoHa VPS

on:
  push:
    branches:
      - master
      - staging

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  conoha-check:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install uv
        uses: astral-sh/setup-uv@d8db0a86d3d88f3017a4e6b8a1e2b234e7a0a1b5 # v4.0.0
        with:
          version: "0.4.17"
          enable-cache: true

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        id: install
        run: |
          uv sync --dev --frozen

      - name: lint
        if: steps.install.outcome == 'success'
        run: |
          uv run ruff check --output-format github .

      - name: check format
        if: steps.install.outcome == 'success'
        run: |
          uv run ruff format --check .

  conoha-setup:
    needs: conoha-check
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read
    outputs:
      ENVIRONMENT: ${{ steps.output.outputs.ENVIRONMENT }}

    steps:
      - name: staging
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: |
          echo "ENVIRONMENT=staging" >> "$GITHUB_ENV"

      - name: production
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          echo "ENVIRONMENT=production" >> "$GITHUB_ENV"

      - name: Error
        if: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/staging' }}
        run: |
          echo "[ERROR] Invalid branch: ${{ github.ref }}. Skipping deployment."
          exit 1

      - name: Output environment
        id: output
        run: |
          echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> "$GITHUB_OUTPUT"

  conoha-build:
    needs:
      - conoha-check
      - conoha-setup
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read
      packages: write
    outputs:
      IMAGE_TAG_FOR_PULL: ${{steps.tag.outputs.TAG_FOR_PULL}}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create image tag
        id: tag
        run: |
          SHA=${{github.sha}}
          TAG="${{vars.IMAGE}}:$(TZ=UTC-9 date +'%Y%m')-${SHA:0:7}"
          echo "TAG_FOR_PULL=${TAG}" >> "$GITHUB_OUTPUT"

          if [ "${{ needs.conoha-setup.outputs.ENVIRONMENT }}" = "production" ]; then

            LATEST="${{vars.IMAGE}}:latest"
            echo "TAGS=${TAG},${LATEST}" >> "$GITHUB_OUTPUT"

          else
            echo "TAGS=${TAG}" >> "$GITHUB_OUTPUT"
          fi
          echo "Generated image tag: ${TAG}"

      - name: Build and push
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.tag.outputs.TAGS }}
          cache-from: type=gha
          cache-to: type=gha, mode=max

  conoha:
    needs:
      - conoha-check
      - conoha-setup
      - conoha-build
    if: ${{ needs.conoha-setup.outputs.ENVIRONMENT == 'production' || needs.conoha-setup.outputs.ENVIRONMENT == 'staging' }}
    environment: ${{ needs.conoha-setup.outputs.ENVIRONMENT }}
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read
      packages: read

    steps:
      - name: SSH to ConoHa VPS
        uses: appleboy/ssh-action@7eaf76671a0d7eec5d98ee897acda4f968735a17 # v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          # always remove old container: https://stackoverflow.com/questions/34228864/stop-and-delete-docker-container-if-its-running
          script: |
            echo ${{secrets.GITHUB_TOKEN}} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker stop ${{ vars.CONTAINER_NAME }} || true && docker rm ${{ vars.CONTAINER_NAME }} || true
            docker run \
              -d \
              --name ${{ vars.CONTAINER_NAME }} \
              --env DISCORD_BOT_TOKEN=${{secrets.DISCORD_BOT_TOKEN}} \
              --env LOG_CHANNEL_ID=${{vars.LOG_CHANNEL_ID}} \
              --env NOTION_TOKEN=${{secrets.NOTION_TOKEN}} \
              --env NOTION_DOMAIN=${{vars.NOTION_DOMAIN}} \
              --env SENTRY_DSN=${{secrets.SENTRY_DSN}} \
              --env DEPLOY_ENV=${{ needs.conoha-setup.outputs.ENVIRONMENT }} \
              --env CF_ACCESS_CLIENT_ID=${{secrets.CF_ACCESS_CLIENT_ID}} \
              --env CF_ACCESS_CLIENT_SECRET=${{secrets.CF_ACCESS_CLIENT_SECRET}} \
              ${{ needs.conoha-build.outputs.IMAGE_TAG_FOR_PULL }}
            docker image prune -f
          script_stop: true
