name: Deploy to ConoHa VPS

on:
  push:
    branches:
      - master
      - staging
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CONTAINER_NAME: "mikubot"
  STAGING_CONTAINER_NAME: "mikubot-staging"

jobs:
  check:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: setup CPython
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          cache: "pip"
          cache-dependency-path: "requirements-dev.lock"
          python-version-file: ".python-version"

      - name: install dependencies
        id: install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: lint
        if: steps.install.outcome == 'success'
        run: |
          ruff check --output-format github .

      - name: check format
        if: steps.install.outcome == 'success'
        run: |
          ruff format --check .

  build:
    needs: check
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: read
      packages: write
    outputs:
      IMAGE_TAG_FOR_PULL: ${{steps.tag.outputs.TAG_FOR_PULL}}
      IS_STAGING: ${{ steps.tag.outputs.IS_STAGING }}

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # v3.4.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create image tag
        id: tag
        run: |
          SHA=${{github.sha}}
          TAG="${{vars.IMAGE}}:$(TZ=UTC-9 date +'%Y%m')-${SHA:0:7}"
          echo "TAG_FOR_PULL=${TAG}" >> "$GITHUB_OUTPUT"

          if [ "${{ github.ref }}" = "refs/heads/master" ]; then

            LATEST="${{vars.IMAGE}}:latest"
            echo "TAGS=${TAG},${LATEST}" >> "$GITHUB_OUTPUT"
            echo "IS_STAGING=FALSE" >> "$GITHUB_OUTPUT

          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then

            echo "TAGS=${TAG}" >> "$GITHUB_OUTPUT"
            echo "IS_STAGING=TRUE" >> "$GITHUB_OUTPUT"

          else
            echo "[WARNING] Invalid branch: ${{ github.ref }}. Skipping deployment."
            exit 1
          fi
          echo "Generated image tag: ${TAG}"

      - name: Build and push
        uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6.3.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.tag.outputs.TAGS }}
          cache-from: type=gha
          cache-to: type=gha, mode=max

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: read
      packages: read

    steps:
      - name: SSH to ConoHa VPS
        uses: appleboy/ssh-action@029f5b4aeeeb58fdfe1410a5d17f967dacf36262 # v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          # always remove old container: https://stackoverflow.com/questions/34228864/stop-and-delete-docker-container-if-its-running
          script: |
            echo ${{secrets.GITHUB_TOKEN}} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker pull ${{ needs.build.outputs.IMAGE_TAG_FOR_PULL }}

            if [ "${{ needs.build.outputs.IS_STAGING }}" = "TRUE" ]; then

              docker stop ${{ env.STAGING_CONTAINER_NAME }} || true && docker rm ${{ env.STAGING_CONTAINER_NAME }} || true
              docker run \
                -d \
                --name ${{ env.STAGING_CONTAINER_NAME }} \
                --env DISCORD_BOT_TOKEN=${{secrets.STAGING_DISCORD_TOKEN}} \
                --env LOG_CHANNEL_ID=${{vars.STAGING_LOG_CHANNEL_ID}} \
                --env NOTION_TOKEN=${{secrets.STAGING_NOTION_TOKEN}} \
                --env NOTION_DOMAIN=${{vars.NOTION_DOMAIN}} \
                ${{ needs.build.outputs.IMAGE_TAG_FOR_PULL }}
              docker image prune -f
              exit 0

            elif [ "${{ needs.build.outputs.IS_STAGING }}" = "FALSE" ]; then

              docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
              docker run \
              -d \
                --name ${{ env.CONTAINER_NAME }} \
                --env DISCORD_BOT_TOKEN=${{secrets.DISCORD_TOKEN}} \
                --env LOG_CHANNEL_ID=${{vars.LOG_CHANNEL_ID}} \
                --env NOTION_TOKEN=${{secrets.NOTION_TOKEN}} \
                --env NOTION_DOMAIN=${{vars.NOTION_DOMAIN}} \
                --env SENTRY_DSN=${{secrets.SENTRY_DSN}} \
                ${{ needs.build.outputs.IMAGE_TAG_FOR_PULL }}
              docker image prune -f
              exit 0

            else
              echo "[ERROR] Invalid IS_STAGING value: ${{ needs.build.outputs.IS_STAGING }}"
              exit 1
            fi
          script_stop: true
