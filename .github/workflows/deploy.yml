name: Deploy to ConoHa VPS

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: デプロイする環境 (production | staging)
      container_name:
        type: string
        description: Bot のコンテナを識別するための名前 (vars.CONTAINER_NAME を期待)
      image_name:
        type: string
        description: Bot の Docker イメージの名前 (vars.IMAGE を期待)
      log_channel_id:
        type: string
        description: ログを送信する Discord チャンネルの ID (vars.LOG_CHANNEL_ID を期待)
      notion_domain:
        type: string
        description: Notion のドメイン (vars.NOTION_DOMAIN を期待)

    secrets:
      HOST:
        required: true
      SSH_USER:
        required: true
      SSH_KEY:
        required: true
      DISCORD_BOT_TOKEN:
        required: true
      NOTION_TOKEN:
        required: true
      SENTRY_DSN:
        required: true
      CF_ACCESS_CLIENT_ID:
        required: true
      CF_ACCESS_CLIENT_SECRET:
        required: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  detect-env:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    outputs:
      environment: ${{ steps.output.outputs.ENVIRONMENT }}

    steps:
      - name: Detect staging
        id: detect-staging
        if: inputs.environment == 'staging'
        run: |
          echo "ENVIRONMENT=staging" >> "$GITHUB_ENV"

      - name: Detect production
        id: detect-production
        if: inputs.environment == 'production'
        run: |
          echo "ENVIRONMENT=production" >> "$GITHUB_ENV"

      - name: Fail if not production or staging
        if: steps.detect-staging.outcome == 'skipped' && steps.detect-production.outcome == 'skipped'
        run: |
          echo "::error::Invalid environment: ${{ inputs.environment }}. Skipping deployment."
          exit 1

      - name: Output environment
        id: output
        run: |
          echo "environment=${{ env.ENVIRONMENT }}" >> "$GITHUB_OUTPUT"

  check:
    needs:
      - detect-env
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install uv
        uses: astral-sh/setup-uv@f94ec6bedd8674c4426838e6b50417d36b6ab231 # v5.3.1
        with:
          version: "0.6.5"
          enable-cache: true

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        id: install
        run: uv sync --dev --frozen

      - name: lint
        run: |
          uv run ruff check --output-format github .

      - name: check format
        run: uv run ruff format --check .

  build:
    needs:
      - detect-env
      - check
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    outputs:
      IMAGE_TAG_FOR_PULL: ${{steps.tag.outputs.TAG_FOR_PULL}}

    steps:
      - name: Checkout for production
        if: needs.detect-env.outputs.environment == 'production'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: master

      - name: Checkout for staging
        if: needs.detect-env.outputs.environment == 'staging'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: staging

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create image tag
        id: tag
        run: |
          SHA=${{ github.sha }}
          TAG="${{ inputs.image_name }}:$(TZ=UTC-9 date +'%Y%m')-${SHA:0:7}"
          echo "TAG_FOR_PULL=${TAG}" >> "$GITHUB_OUTPUT"

          if [ "${{ needs.detect-env.outputs.environment }}" = "production" ]; then

            LATEST="${{ inputs.image_name }}:latest"
            echo "TAGS=${TAG},${LATEST}" >> "$GITHUB_OUTPUT"

          else
            echo "TAGS=${TAG}" >> "$GITHUB_OUTPUT"
          fi
          echo "Generated image tag: ${TAG}"

      - name: Build and push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.tag.outputs.TAGS }}
          cache-from: type=gha
          cache-to: type=gha, mode=max

  deploy:
    needs:
      - detect-env
      - build
    environment: ${{ needs.detect-env.outputs.environment }}
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      contents: read
      packages: read

    steps:
      - name: SSH to ConoHa VPS
        uses: appleboy/ssh-action@8faa84277b88b6cd1455986f459aa66cf72bc8a3 # v1.2.1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          # always remove old container: https://stackoverflow.com/questions/34228864/stop-and-delete-docker-container-if-its-running
          script: |
            set -euo pipefail
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker stop ${{ inputs.container_name }} || true && docker rm ${{ inputs.container_name }} || true
            docker run \
              -d \
              --name ${{ inputs.container_name }} \
              --env DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }} \
              --env LOG_CHANNEL_ID=${{ inputs.log_channel_id }} \
              --env NOTION_TOKEN=${{ secrets.NOTION_TOKEN }} \
              --env NOTION_DOMAIN=${{ inputs.notion_domain }} \
              --env SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
              --env DEPLOY_ENV=${{ needs.detect-env.outputs.environment }} \
              --env CF_ACCESS_CLIENT_ID=${{ secrets.CF_ACCESS_CLIENT_ID }} \
              --env CF_ACCESS_CLIENT_SECRET=${{ secrets.CF_ACCESS_CLIENT_SECRET }} \
              ${{ needs.build.outputs.IMAGE_TAG_FOR_PULL }}
            docker image prune -f
